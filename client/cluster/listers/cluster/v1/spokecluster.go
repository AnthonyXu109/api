// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/open-cluster-management/api/cluster/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpokeClusterLister helps list SpokeClusters.
type SpokeClusterLister interface {
	// List lists all SpokeClusters in the indexer.
	List(selector labels.Selector) (ret []*v1.SpokeCluster, err error)
	// Get retrieves the SpokeCluster from the index for a given name.
	Get(name string) (*v1.SpokeCluster, error)
	SpokeClusterListerExpansion
}

// spokeClusterLister implements the SpokeClusterLister interface.
type spokeClusterLister struct {
	indexer cache.Indexer
}

// NewSpokeClusterLister returns a new SpokeClusterLister.
func NewSpokeClusterLister(indexer cache.Indexer) SpokeClusterLister {
	return &spokeClusterLister{indexer: indexer}
}

// List lists all SpokeClusters in the indexer.
func (s *spokeClusterLister) List(selector labels.Selector) (ret []*v1.SpokeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SpokeCluster))
	})
	return ret, err
}

// Get retrieves the SpokeCluster from the index for a given name.
func (s *spokeClusterLister) Get(name string) (*v1.SpokeCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("spokecluster"), name)
	}
	return obj.(*v1.SpokeCluster), nil
}
