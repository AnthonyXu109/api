// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	clustersv1 "github.com/open-cluster-management/api/clusters/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSpokeClusters implements SpokeClusterInterface
type FakeSpokeClusters struct {
	Fake *FakeClustersV1
}

var spokeclustersResource = schema.GroupVersionResource{Group: "clusters.open-cluster-management.io", Version: "v1", Resource: "spokeclusters"}

var spokeclustersKind = schema.GroupVersionKind{Group: "clusters.open-cluster-management.io", Version: "v1", Kind: "SpokeCluster"}

// Get takes name of the spokeCluster, and returns the corresponding spokeCluster object, and an error if there is any.
func (c *FakeSpokeClusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *clustersv1.SpokeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(spokeclustersResource, name), &clustersv1.SpokeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*clustersv1.SpokeCluster), err
}

// List takes label and field selectors, and returns the list of SpokeClusters that match those selectors.
func (c *FakeSpokeClusters) List(ctx context.Context, opts v1.ListOptions) (result *clustersv1.SpokeClusterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(spokeclustersResource, spokeclustersKind, opts), &clustersv1.SpokeClusterList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &clustersv1.SpokeClusterList{ListMeta: obj.(*clustersv1.SpokeClusterList).ListMeta}
	for _, item := range obj.(*clustersv1.SpokeClusterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested spokeClusters.
func (c *FakeSpokeClusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(spokeclustersResource, opts))
}

// Create takes the representation of a spokeCluster and creates it.  Returns the server's representation of the spokeCluster, and an error, if there is any.
func (c *FakeSpokeClusters) Create(ctx context.Context, spokeCluster *clustersv1.SpokeCluster, opts v1.CreateOptions) (result *clustersv1.SpokeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(spokeclustersResource, spokeCluster), &clustersv1.SpokeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*clustersv1.SpokeCluster), err
}

// Update takes the representation of a spokeCluster and updates it. Returns the server's representation of the spokeCluster, and an error, if there is any.
func (c *FakeSpokeClusters) Update(ctx context.Context, spokeCluster *clustersv1.SpokeCluster, opts v1.UpdateOptions) (result *clustersv1.SpokeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(spokeclustersResource, spokeCluster), &clustersv1.SpokeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*clustersv1.SpokeCluster), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSpokeClusters) UpdateStatus(ctx context.Context, spokeCluster *clustersv1.SpokeCluster, opts v1.UpdateOptions) (*clustersv1.SpokeCluster, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(spokeclustersResource, "status", spokeCluster), &clustersv1.SpokeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*clustersv1.SpokeCluster), err
}

// Delete takes name of the spokeCluster and deletes it. Returns an error if one occurs.
func (c *FakeSpokeClusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(spokeclustersResource, name), &clustersv1.SpokeCluster{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSpokeClusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(spokeclustersResource, listOpts)

	_, err := c.Fake.Invokes(action, &clustersv1.SpokeClusterList{})
	return err
}

// Patch applies the patch and returns the patched spokeCluster.
func (c *FakeSpokeClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *clustersv1.SpokeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(spokeclustersResource, name, pt, data, subresources...), &clustersv1.SpokeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*clustersv1.SpokeCluster), err
}
