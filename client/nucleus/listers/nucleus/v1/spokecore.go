// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/open-cluster-management/api/nucleus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SpokeCoreLister helps list SpokeCores.
type SpokeCoreLister interface {
	// List lists all SpokeCores in the indexer.
	List(selector labels.Selector) (ret []*v1.SpokeCore, err error)
	// Get retrieves the SpokeCore from the index for a given name.
	Get(name string) (*v1.SpokeCore, error)
	SpokeCoreListerExpansion
}

// spokeCoreLister implements the SpokeCoreLister interface.
type spokeCoreLister struct {
	indexer cache.Indexer
}

// NewSpokeCoreLister returns a new SpokeCoreLister.
func NewSpokeCoreLister(indexer cache.Indexer) SpokeCoreLister {
	return &spokeCoreLister{indexer: indexer}
}

// List lists all SpokeCores in the indexer.
func (s *spokeCoreLister) List(selector labels.Selector) (ret []*v1.SpokeCore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SpokeCore))
	})
	return ret, err
}

// Get retrieves the SpokeCore from the index for a given name.
func (s *spokeCoreLister) Get(name string) (*v1.SpokeCore, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("spokecore"), name)
	}
	return obj.(*v1.SpokeCore), nil
}
