// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	nucleusv1 "github.com/open-cluster-management/api/nucleus/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSpokeCores implements SpokeCoreInterface
type FakeSpokeCores struct {
	Fake *FakeNucleusV1
}

var spokecoresResource = schema.GroupVersionResource{Group: "nucleus.open-cluster-management.io", Version: "v1", Resource: "spokecores"}

var spokecoresKind = schema.GroupVersionKind{Group: "nucleus.open-cluster-management.io", Version: "v1", Kind: "SpokeCore"}

// Get takes name of the spokeCore, and returns the corresponding spokeCore object, and an error if there is any.
func (c *FakeSpokeCores) Get(ctx context.Context, name string, options v1.GetOptions) (result *nucleusv1.SpokeCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(spokecoresResource, name), &nucleusv1.SpokeCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.SpokeCore), err
}

// List takes label and field selectors, and returns the list of SpokeCores that match those selectors.
func (c *FakeSpokeCores) List(ctx context.Context, opts v1.ListOptions) (result *nucleusv1.SpokeCoreList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(spokecoresResource, spokecoresKind, opts), &nucleusv1.SpokeCoreList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &nucleusv1.SpokeCoreList{ListMeta: obj.(*nucleusv1.SpokeCoreList).ListMeta}
	for _, item := range obj.(*nucleusv1.SpokeCoreList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested spokeCores.
func (c *FakeSpokeCores) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(spokecoresResource, opts))
}

// Create takes the representation of a spokeCore and creates it.  Returns the server's representation of the spokeCore, and an error, if there is any.
func (c *FakeSpokeCores) Create(ctx context.Context, spokeCore *nucleusv1.SpokeCore, opts v1.CreateOptions) (result *nucleusv1.SpokeCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(spokecoresResource, spokeCore), &nucleusv1.SpokeCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.SpokeCore), err
}

// Update takes the representation of a spokeCore and updates it. Returns the server's representation of the spokeCore, and an error, if there is any.
func (c *FakeSpokeCores) Update(ctx context.Context, spokeCore *nucleusv1.SpokeCore, opts v1.UpdateOptions) (result *nucleusv1.SpokeCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(spokecoresResource, spokeCore), &nucleusv1.SpokeCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.SpokeCore), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSpokeCores) UpdateStatus(ctx context.Context, spokeCore *nucleusv1.SpokeCore, opts v1.UpdateOptions) (*nucleusv1.SpokeCore, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(spokecoresResource, "status", spokeCore), &nucleusv1.SpokeCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.SpokeCore), err
}

// Delete takes name of the spokeCore and deletes it. Returns an error if one occurs.
func (c *FakeSpokeCores) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(spokecoresResource, name), &nucleusv1.SpokeCore{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSpokeCores) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(spokecoresResource, listOpts)

	_, err := c.Fake.Invokes(action, &nucleusv1.SpokeCoreList{})
	return err
}

// Patch applies the patch and returns the patched spokeCore.
func (c *FakeSpokeCores) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *nucleusv1.SpokeCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(spokecoresResource, name, pt, data, subresources...), &nucleusv1.SpokeCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.SpokeCore), err
}
