// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	nucleusv1 "github.com/open-cluster-management/api/nucleus/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeHubCores implements HubCoreInterface
type FakeHubCores struct {
	Fake *FakeNucleusV1
}

var hubcoresResource = schema.GroupVersionResource{Group: "nucleus.open-cluster-management.io", Version: "v1", Resource: "hubcores"}

var hubcoresKind = schema.GroupVersionKind{Group: "nucleus.open-cluster-management.io", Version: "v1", Kind: "HubCore"}

// Get takes name of the hubCore, and returns the corresponding hubCore object, and an error if there is any.
func (c *FakeHubCores) Get(ctx context.Context, name string, options v1.GetOptions) (result *nucleusv1.HubCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(hubcoresResource, name), &nucleusv1.HubCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.HubCore), err
}

// List takes label and field selectors, and returns the list of HubCores that match those selectors.
func (c *FakeHubCores) List(ctx context.Context, opts v1.ListOptions) (result *nucleusv1.HubCoreList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(hubcoresResource, hubcoresKind, opts), &nucleusv1.HubCoreList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &nucleusv1.HubCoreList{ListMeta: obj.(*nucleusv1.HubCoreList).ListMeta}
	for _, item := range obj.(*nucleusv1.HubCoreList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested hubCores.
func (c *FakeHubCores) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(hubcoresResource, opts))
}

// Create takes the representation of a hubCore and creates it.  Returns the server's representation of the hubCore, and an error, if there is any.
func (c *FakeHubCores) Create(ctx context.Context, hubCore *nucleusv1.HubCore, opts v1.CreateOptions) (result *nucleusv1.HubCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(hubcoresResource, hubCore), &nucleusv1.HubCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.HubCore), err
}

// Update takes the representation of a hubCore and updates it. Returns the server's representation of the hubCore, and an error, if there is any.
func (c *FakeHubCores) Update(ctx context.Context, hubCore *nucleusv1.HubCore, opts v1.UpdateOptions) (result *nucleusv1.HubCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(hubcoresResource, hubCore), &nucleusv1.HubCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.HubCore), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeHubCores) UpdateStatus(ctx context.Context, hubCore *nucleusv1.HubCore, opts v1.UpdateOptions) (*nucleusv1.HubCore, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(hubcoresResource, "status", hubCore), &nucleusv1.HubCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.HubCore), err
}

// Delete takes name of the hubCore and deletes it. Returns an error if one occurs.
func (c *FakeHubCores) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(hubcoresResource, name), &nucleusv1.HubCore{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeHubCores) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(hubcoresResource, listOpts)

	_, err := c.Fake.Invokes(action, &nucleusv1.HubCoreList{})
	return err
}

// Patch applies the patch and returns the patched hubCore.
func (c *FakeHubCores) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *nucleusv1.HubCore, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(hubcoresResource, name, pt, data, subresources...), &nucleusv1.HubCore{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nucleusv1.HubCore), err
}
