// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	versioned "github.com/open-cluster-management/api/client/nucleus/clientset/versioned"
	internalinterfaces "github.com/open-cluster-management/api/client/nucleus/informers/externalversions/internalinterfaces"
	v1 "github.com/open-cluster-management/api/client/nucleus/listers/nucleus/v1"
	nucleusv1 "github.com/open-cluster-management/api/nucleus/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// HubCoreInformer provides access to a shared informer and lister for
// HubCores.
type HubCoreInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.HubCoreLister
}

type hubCoreInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewHubCoreInformer constructs a new informer for HubCore type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewHubCoreInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredHubCoreInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredHubCoreInformer constructs a new informer for HubCore type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredHubCoreInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NucleusV1().HubCores().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NucleusV1().HubCores().Watch(context.TODO(), options)
			},
		},
		&nucleusv1.HubCore{},
		resyncPeriod,
		indexers,
	)
}

func (f *hubCoreInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredHubCoreInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *hubCoreInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&nucleusv1.HubCore{}, f.defaultInformer)
}

func (f *hubCoreInformer) Lister() v1.HubCoreLister {
	return v1.NewHubCoreLister(f.Informer().GetIndexer())
}
