package v1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_HubCore = map[string]string{
	"":       "HubCore represents a deployment of nucleus hub core component. HubCore will be only deployed in open-cluster-management namespace.",
	"spec":   "Spec represents a desired deployment configuration of nucleus hub",
	"status": "Status represents the current status of nucleus hub",
}

func (HubCore) SwaggerDoc() map[string]string {
	return map_HubCore
}

var map_HubCoreList = map[string]string{
	"":         "HubCoreList is a collection of nucleus hub.",
	"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
	"items":    "Items is a list of nucleus hub.",
}

func (HubCoreList) SwaggerDoc() map[string]string {
	return map_HubCoreList
}

var map_HubCoreSpec = map[string]string{
	"":                          "HubCoreSpec represents a desired deployment configuration of nucleus hub.",
	"registrationImagePullSpec": "RegistrationImagePullSpec represents the desired image of registration controller installed on hub.",
}

func (HubCoreSpec) SwaggerDoc() map[string]string {
	return map_HubCoreSpec
}

var map_HubCoreStatus = map[string]string{
	"":           "HubCoreStatus represents the current status of nucleus hub.",
	"conditions": "Conditions contain the different condition statuses for this hubcore. Valid condition types are: Applied: components in hub is applied. Available: components in hub are available and ready to serve. Progressing: components in hub are in a transitioning state. Degraded: components in hub do not match the desired configuration and only provide degraded service.",
}

func (HubCoreStatus) SwaggerDoc() map[string]string {
	return map_HubCoreStatus
}

var map_SpokeCore = map[string]string{
	"":       "SpokeCore represents a deployment of nucleus core agent on spoke cluster. When the deployment of spoke core agent is deployed, it will requires a secret with the name of bootstrap-hub-kubeconfig in the namespace defined in the spec.",
	"spec":   "Spec represents the desired deployment configuratioin of nucleus agent.",
	"status": "Status represents the current status of nucleus agent.",
}

func (SpokeCore) SwaggerDoc() map[string]string {
	return map_SpokeCore
}

var map_SpokeCoreList = map[string]string{
	"":         "SpokeCoreList is a collection of nucleus spoke agent.",
	"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
	"items":    "Items is a list of nucleus spoke agent.",
}

func (SpokeCoreList) SwaggerDoc() map[string]string {
	return map_SpokeCoreList
}

var map_SpokeCoreSpec = map[string]string{
	"":                          "SpokeCoreSpec represents the desired deployment configuratioin of nucleus spoke agent.",
	"namespace":                 "Namespace is the namespace to deploy the agent. The namespace must have a prefix of \"open-cluster-management-\", and if it is not set, the namespace of \"open-cluster-management\" is used to deploy agent.",
	"registrationImagePullSpec": "RegistrationImagePullSpec represents the desired image configuration of registration agent.",
	"workImagePullSpec":         "WorkImagePullSpec represents the desired image configuration of work agent.",
	"clusterName":               "ClusterName is the name of the spoke cluster to be created on hub. The spoke agent generates a random name if it is not set, or discovers the appropriate cluster name on openshift.",
}

func (SpokeCoreSpec) SwaggerDoc() map[string]string {
	return map_SpokeCoreSpec
}

var map_SpokeCoreStatus = map[string]string{
	"":           "SpokeCoreStatus represents the current status of nucleus spoke agent.",
	"conditions": "Conditions contain the different condition statuses for this spokecore. Valid condition types are: Applied: components in spoke is applied. Available: components in spoke are available and ready to serve. Progressing: components in spoke are in a transitioning state. Degraded: components in spoke do not match the desired configuration and only provide degraded service.",
}

func (SpokeCoreStatus) SwaggerDoc() map[string]string {
	return map_SpokeCoreStatus
}

var map_StatusCondition = map[string]string{
	"":                   "StatusCondition contains condition information.",
	"type":               "Type is the type of the cluster condition.",
	"status":             "Status is the status of the condition. One of True, False, Unknown.",
	"lastTransitionTime": "LastTransitionTime is the last time the condition changed from one status to another.",
	"reason":             "Reason is a (brief) reason for the condition's last status change.",
	"message":            "Message is a human-readable message indicating details about the last status change.",
}

func (StatusCondition) SwaggerDoc() map[string]string {
	return map_StatusCondition
}

// AUTO-GENERATED FUNCTIONS END HERE
